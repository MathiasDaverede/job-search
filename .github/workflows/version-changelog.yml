name: Version and Changelog

# Triggered by project.yml after successful completion of the test-project job, for pull requests to main (releases or hotfixs).
# Ensures the workflow only runs if project.yml succeeds, via workflow_dispatch.
on:
  workflow_dispatch:

permissions:
  contents: write # For committing changes to VERSION.md and CHANGELOG.md
  pull-requests: read # For fetching PR data via GitHub API
  issues: read # For fetching issue titles via GitHub API

jobs:
  update-version-changelog:
    # Skip this job if triggered by its own commit to avoid redundant runs.
    if: github.actor != 'github-action' && github.actor != 'GitHub Action'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches the full Git history to analyse tags
          ref: ${{ github.event.pull_request.head.ref }} # Checkout the PR branch

      - name: Validate branch name and extract version
        id: pr_info
        run: |
          PR_BRANCH=${{ github.event.pull_request.head.ref }}
          if [[ ! "$PR_BRANCH" =~ ^(release|hotfix)/[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: PR branch must be 'release/X.Y.Z' or 'hotfix/X.Y.Z'"
            exit 1
          fi
          VERSION=$(echo "$PR_BRANCH" | sed -E 's/^(release|hotfix)\/([0-9]+\.[0-9]+\.[0-9]+)$/\2/')
          echo "NEW_VERSION=v$VERSION" >> $GITHUB_ENV
          echo "PR_BRANCH=$PR_BRANCH" >> $GITHUB_ENV
          
      - name: Update VERSION.md
        run: echo "${{ env.NEW_VERSION }}" > VERSION.md

      - name: Update CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CHANGELOG_HEADER="# Changelog\nAll notable changes to this project are documented in this file.\n\n"
          CHANGELOG_CONTENT="## ${{ env.NEW_VERSION }} - $(date +%Y-%m-%d)\n"
          CHANGELOG_CONTENT+="[Release ${{ env.NEW_VERSION }}](https://github.com/MathiasDaverede/job-search/releases/tag/${{ env.NEW_VERSION }})\n"
          if [ "${{ env.LATEST_TAG }}" != "v0.0.0" ]; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$PREVIOUS_TAG" ]; then
              TAG_DATE=$(git log -1 --format=%ci ${PREVIOUS_TAG} | cut -d' ' -f1)
            else
              TAG_DATE="1970-01-01"
            fi
          else
            TAG_DATE="1970-01-01"
          fi
          PR_LIST=$(gh pr list --repo MathiasDaverede/job-search --state merged --base main --search "merged:>${TAG_DATE}" --json number,title,mergedAt --jq '.[] | "\(.number) \(.title)"')
          while IFS= read -r PR; do
            if [[ $PR =~ ^([0-9]+)[[:space:]]+(feat|fix):[[:space:]]*(.+?)([[:space:]]*\[closes[[:space:]]*#([0-9]+)\])?$ ]]; then
              PR_NUMBER="${BASH_REMATCH[1]}"
              TYPE="${BASH_REMATCH[2]}"
              DESCRIPTION="${BASH_REMATCH[3]}"
              ISSUE_NUMBER="${BASH_REMATCH[5]}" # Will be empty if [closes #N] is not present
              if [ -n "$ISSUE_NUMBER" ]; then
                ISSUE_TITLE=$(gh issue view $ISSUE_NUMBER --repo MathiasDaverede/job-search --json title --jq .title 2>/dev/null || echo "Issue not found")
                if [ -n "$ISSUE_TITLE" ] && [ "$ISSUE_TITLE" != "Issue not found" ]; then
                  CHANGELOG_CONTENT+="- ${TYPE} [#${ISSUE_NUMBER}](https://github.com/MathiasDaverede/job-search/issues/${ISSUE_NUMBER}) ${ISSUE_TITLE}\n"
                else
                  echo "Warning: Issue #${ISSUE_NUMBER} not found for PR #${PR_NUMBER}, using PR title"
                  CHANGELOG_CONTENT+="- ${TYPE} [#${PR_NUMBER}](https://github.com/MathiasDaverede/job-search/pull/${PR_NUMBER}) ${DESCRIPTION}\n"
                fi
              else
                echo "Info: No issue linked for PR #${PR_NUMBER}, using PR title"
                CHANGELOG_CONTENT+="- ${TYPE} [#${PR_NUMBER}](https://github.com/MathiasDaverede/job-search/pull/${PR_NUMBER}) ${DESCRIPTION}\n"
              fi
            else
              echo "Warning: Skipping PR #${PR%%[[:space:]]*}: Title does not match 'feat|fix' format"
            fi
          done <<< "$PR_LIST"
          if [ -z "$PR_LIST" ]; then
            echo "Warning: No merged PRs found since ${TAG_DATE}, changelog will only include header"
          fi
          if [ -f CHANGELOG.md ]; then
            echo -e "${CHANGELOG_HEADER}${CHANGELOG_CONTENT}\n$(cat CHANGELOG.md)" > CHANGELOG.md
          else
            echo -e "${CHANGELOG_HEADER}${CHANGELOG_CONTENT}" > CHANGELOG.md
          fi

      - name: Output files content
        run: |
          echo "Generated version ${{ env.NEW_VERSION }}"
          echo "VERSION.md content:"
          cat VERSION.md
          echo "CHANGELOG.md content:"
          cat CHANGELOG.md

      - name: Commit and push files
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add VERSION.md CHANGELOG.md
          git commit -m "Update VERSION.md to ${{ env.NEW_VERSION }} and CHANGELOG.md"
          git push origin ${{ env.PR_BRANCH }}
