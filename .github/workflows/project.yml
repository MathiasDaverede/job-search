name: Project

# Run GitHub Actions only on pull requests to stay within the free plan limits (500 MB storage, 2000 minutes/month).
# Pull requests to 'develop' are for feature branches.
# Pull requests to 'main' are for release or hotfix branches.
on:
  pull_request:
    branches: [main, develop]

permissions:
  contents: write # For committing changes to VERSION.md and CHANGELOG.md
  pull-requests: read # For fetching pull request data via GitHub API
  issues: read # For fetching issue titles via GitHub API

jobs:
  test-project:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create .env.local with host data
      run: |
        file_content="USER_NAME=$(whoami)\n"
        file_content+="USER_ID=$(id -u)\n"
        file_content+="GROUP_ID=$(id -g)\n"
        file_content+="MARIADB_DATABASE_NAME=job_search\n"
        file_content+="MARIADB_ROOT_PASSWORD=root"
        echo -e $file_content > .env.local

    - name: Display .env.local
      run: cat .env.local

    - name: Build and start containers
      run: docker compose --env-file .env.local up -d

    - name: Check containers status
      run: |
        docker ps -a
        docker logs job-search-web-1

    - name: Verify host's rights
      run: |
        echo "$(whoami) $(id -u) $(id -g)"
        ls -l 
        echo "Executables files :"
        ls -l bin/

    - name: Verify container's rights in /var/www/
      run: |
        echo "$(docker compose exec web whoami) $(docker compose exec web id -u) $(docker compose exec web id -g)"
        docker compose exec web ls -l /var/ | grep www
        docker compose exec web ls -l /var/www/
        echo  "Executables files :"
        docker compose exec web ls -l /var/www/bin/

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: vendor
        key: composer-${{ hashFiles('composer.lock') }}
        restore-keys: composer-

    - name: Cache Importmap dependencies
      uses: actions/cache@v4
      with:
        path: assets/vendor
        key: importmap-${{ hashFiles('importmap.php') }}
        restore-keys: importmap-

    - name: Install Composer dependencies
      run: docker compose exec web composer install --no-interaction --optimize-autoloader
      
    - name: Run Doctrine migrations
      run: docker compose exec web bin/console doctrine:migrations:migrate --no-interaction

    - name: Cache Sass assets
      uses: actions/cache@v4
      with:
        path: var/sass
        key: sass-${{ hashFiles('assets/**/*.scss') }}
        restore-keys: sass-

    - name: Generate Sass assets
      run: docker compose exec web bin/console sass:build

    - name: Check Composer platform requirements
      run: docker compose exec web composer check-platform-reqs

    - name: Check Symfony requirements
      run: docker compose exec web symfony check:requirements

    - name: Check Symfony security issues in project dependencies
      run: docker compose exec web symfony check:security

    - name: Audit importmap
      run: docker compose exec web bin/console importmap:audit

    - name: Unit tests
      run: |
        chmod +x ./bin/phpunit
        docker compose exec web bin/console --env=test doctrine:database:create
        docker compose exec web bin/console --env=test doctrine:schema:create
        docker compose exec web bin/console --env=test doctrine:fixtures:load --no-interaction
        docker compose exec web bin/phpunit

  update-version-changelog:
    # Only if precedent job succeed and come from a pull request on main (release or hotfix)
    needs: test-project
    if: github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches the full Git history to analyse tags
          ref: ${{ github.event.workflow_run.head_branch || github.event.inputs.ref || github.ref_name }}  # Use the PR branch

      - name: Install GitHub CLI
        run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
          sudo apt-add-repository https://cli.github.com/packages
          sudo apt update
          sudo apt install gh

      - name: Validate branch name and extract version
        id: pr_info
        run: |
          PR_BRANCH=${{ github.event.workflow_run.head_branch || github.event.inputs.ref || github.ref_name }}
          if [[ ! "$PR_BRANCH" =~ ^(release|hotfix)/[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: PR branch must be 'release/X.Y.Z' or 'hotfix/X.Y.Z'"
            exit 1
          fi
          VERSION=$(echo "$PR_BRANCH" | sed -E 's/^(release|hotfix)\/([0-9]+\.[0-9]+\.[0-9]+)$/\2/')
          echo "NEW_VERSION=v$VERSION" >> $GITHUB_ENV
          echo "PR_BRANCH=$PR_BRANCH" >> $GITHUB_ENV
          
      - name: Update VERSION.md
        run: echo "${{ env.NEW_VERSION }}" > VERSION.md

      - name: Update CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CHANGELOG_HEADER="# Changelog\nAll notable changes to this project are documented in this file.\n\n"
          CHANGELOG_CONTENT="## ${{ env.NEW_VERSION }} - $(date +%Y-%m-%d)\n"
          CHANGELOG_CONTENT+="[Release ${{ env.NEW_VERSION }}](https://github.com/MathiasDaverede/job-search/releases/tag/${{ env.NEW_VERSION }})\n"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            TAG_DATE=$(git log -1 --format=%ci ${PREVIOUS_TAG} | cut -d' ' -f1)
          else
            TAG_DATE="1970-01-01"
          fi
          PR_LIST=$(gh pr list --repo MathiasDaverede/job-search --state merged --base main --search "merged:>${TAG_DATE}" --json number,title,mergedAt --jq '.[] | "\(.number) \(.title)"')
          while IFS= read -r PR; do
            if [[ $PR =~ ^([0-9]+)[[:space:]]+(feat|fix):[[:space:]]*(.+?)([[:space:]]*\[closes[[:space:]]*#([0-9]+)\])?$ ]]; then
              PR_NUMBER="${BASH_REMATCH[1]}"
              TYPE="${BASH_REMATCH[2]}"
              DESCRIPTION="${BASH_REMATCH[3]}"
              ISSUE_NUMBER="${BASH_REMATCH[5]}" # Will be empty if [closes #N] is not present
              if [ -n "$ISSUE_NUMBER" ]; then
                ISSUE_TITLE=$(gh issue view $ISSUE_NUMBER --repo MathiasDaverede/job-search --json title --jq .title 2>/dev/null || echo "Issue not found")
                if [ -n "$ISSUE_TITLE" ] && [ "$ISSUE_TITLE" != "Issue not found" ]; then
                  CHANGELOG_CONTENT+="- ${TYPE} [#${ISSUE_NUMBER}](https://github.com/MathiasDaverede/job-search/issues/${ISSUE_NUMBER}) ${ISSUE_TITLE}\n"
                else
                  echo "Warning: Issue #${ISSUE_NUMBER} not found for PR #${PR_NUMBER}, using PR title"
                  CHANGELOG_CONTENT+="- ${TYPE} [#${PR_NUMBER}](https://github.com/MathiasDaverede/job-search/pull/${PR_NUMBER}) ${DESCRIPTION}\n"
                fi
              else
                echo "Info: No issue linked for PR #${PR_NUMBER}, using PR title"
                CHANGELOG_CONTENT+="- ${TYPE} [#${PR_NUMBER}](https://github.com/MathiasDaverede/job-search/pull/${PR_NUMBER}) ${DESCRIPTION}\n"
              fi
            else
              echo "Warning: Skipping PR #${PR%%[[:space:]]*}: Title does not match 'feat|fix' format"
            fi
          done <<< "$PR_LIST"
          if [ -z "$PR_LIST" ]; then
            echo "Warning: No merged PRs found since ${TAG_DATE}, changelog will only include header"
          fi
          if [ -f CHANGELOG.md ]; then
            echo -e "${CHANGELOG_HEADER}${CHANGELOG_CONTENT}\n$(cat CHANGELOG.md)" > CHANGELOG.md
          else
            echo -e "${CHANGELOG_HEADER}${CHANGELOG_CONTENT}" > CHANGELOG.md
          fi

      - name: Output files content
        run: |
          echo "Generated version ${{ env.NEW_VERSION }}"
          echo "VERSION.md content:"
          cat VERSION.md
          echo "CHANGELOG.md content:"
          cat CHANGELOG.md

      - name: Commit and push files
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add VERSION.md CHANGELOG.md
          git commit -m "Update VERSION.md to ${{ env.NEW_VERSION }} and CHANGELOG.md"
          git push origin ${{ env.PR_BRANCH }}
