name: Tag, release and PR to synchronize develop with main

# Triggered after merging PRs to main from release/X.Y.Z or hotfix/X.Y.Z branches.
on:
  pull_request:
    branches: [main]
    types: [closed] # PR merged

permissions:
  contents: write # For creating and pushing tags and releases
  pull-requests: read # For fetching pull request data via GitHub API

jobs:
  # Update VERSION.md and CHANGELOG.md, create tag and release, synchronize develop
  tag-release-sync:
    # Prevent closed (abandoned) PR to launch the job
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # For creating and pushing tags and releases

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0 # Fetches the full Git history to analyse tags
      
      - name: Debug job
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "Actor: ${{ github.actor }}"
          echo "Base Ref: ${{ github.event.pull_request.base.ref }}"
          echo "Head Ref: ${{ github.event.pull_request.head.ref }}"

      - name: Set env.NEW_VERSION
        run: .github/bin/set_env_new_version.sh ${{ github.event.pull_request.head.ref }}

      - name: Git config
        run: .github/bin/git_config_bot.sh

      - name: Create tag
        run: |
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}

      - name: Create GitHub Release
        run: |
          gh version
          gh release create ${{ env.NEW_VERSION }} --title "${{ env.NEW_VERSION }}" --notes-file CHANGELOG.md --target main
      
      - name: Create PR to sync develop
        run: |
          pr_title="Sync develop with main after release ${{ env.NEW_VERSION }}"
          pr_body="This PR synchronizes the develop branch with main after merging release ${{ env.NEW_VERSION }}.\n\nIf merge conflicts occur:\n1. Create a branch 'sync-develop-${{ env.NEW_VERSION }}' from main.\n2. Merge develop into this branch and resolve conflicts (e.g., via SourceTree).\n3. Push the branch to origin.\n4. Update this PR to use 'sync-develop-${{ env.NEW_VERSION }}' as the source branch.\n5. Verify tests pass before merging."
          echo "pr_title: $pr_title"
          echo "pr_body: $pr_body"
          echo "gh version in this step:"
          gh --version
          pr_number=$(gh pr create --base develop --head main --title "$pr_title" --body "$pr_body" --label "sync" --output json | jq -r .number)
          echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
          # VÃ©rifier si la PR a des conflits
          conflict_status=$(gh api repos/{owner}/{repo}/pulls/$pr_number | jq -r .mergeable)
          echo "conflict_status=$conflict_status" >> $GITHUB_OUTPUT
          if [ "$conflict_status" = "false" ]; then
            gh pr comment $pr_number --body "This PR has merge conflicts. Since 'main' is protected, please resolve them manually:\n1. Create a branch 'sync-develop-${{ env.NEW_VERSION }}' from main.\n2. Merge develop into this branch and resolve conflicts (e.g., via SourceTree).\n3. Push the branch to origin.\n4. Update this PR to use 'sync-develop-${{ env.NEW_VERSION }}' as the source branch.\n5. Verify tests pass."
          else
            echo "No merge conflicts detected in PR #$pr_number"
          fi
