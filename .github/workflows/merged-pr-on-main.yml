name: Merged PR on main

# Triggered after merging PRs to main from release/X.Y.Z or hotfix/X.Y.Z branches.
on:
  pull_request:
    branches: [main]
    types: [closed] # PR merged

permissions:
  contents: write # For committing changes to VERSION.md and CHANGELOG.md, creating and pushing tags and releases
  pull-requests: read # For fetching pull request data via GitHub API
  issues: read # For rendering issue links in CHANGELOG.md and release notes

jobs:
  # Update VERSION.md and CHANGELOG.md, create tag and release, synchronize develop
  merged-pr-on-main:
    # Prevent closed (abandoned) PR to launch the job
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0 # Fetches the full Git history to analyse tags
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Debug job
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "Actor: ${{ github.actor }}"
          echo "Base Ref: ${{ github.event.pull_request.base.ref }}"
          echo "Head Ref: ${{ github.event.pull_request.head.ref }}"

      - name: Verify executable files
        run: |
          ls -l .github/bin/

      - name: Update VERSION.md
        run: .github/bin/update_version.sh ${{ github.event.pull_request.head.ref }}

      - name: Update CHANGELOG.md
        run: .github/bin/update_changelog.sh ${{ github.repository }} ${{ env.NEW_VERSION }}

      - name: Output files content
        run: |
          echo "VERSION.md content:"
          cat VERSION.md
          echo "CHANGELOG.md content:"
          cat CHANGELOG.md

      - name: Git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push files
        run: |
          git add VERSION.md CHANGELOG.md
          git commit -m "Update VERSION.md to ${{ env.NEW_VERSION }} and CHANGELOG.md"
          git push origin main

      - name: Create tag
        run: |
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}

      - name: Create GitHub Release
        run: |
          gh version
          gh release create ${{ env.NEW_VERSION }} --title "${{ env.NEW_VERSION }}" --notes-file CHANGELOG.md --target main
      
      - name: Create PR to sync develop
        run: |
          pr_title="Sync develop with main after release ${{ env.NEW_VERSION }}"
          pr_body="This PR synchronizes the develop branch with main after merging release ${{ env.NEW_VERSION }}."
          pr_number=$(gh pr create --base develop --head main --title "$pr_title" --body "$pr_body" --label "sync" --output json | jq -r .number)
          # VÃ©rifier si la PR a des conflits
          conflict_status=$(gh api repos/{owner}/{repo}/pulls/$pr_number | jq -r .mergeable)
          if [ "$conflict_status" = "false" ]; then
            gh pr comment $pr_number --body "This PR has merge conflicts. Please resolve them manually."
          fi
